{"version":3,"sources":["quantized-mesh-layer.js","info-box.js","App.js","serviceWorker.js","index.js"],"names":["DUMMY_DATA","getMeshMaxError","z","toFixed","quantizedMeshUrl","opts","x","y","mosaicUrl","meshMaxError","searchParams","URLSearchParams","url","mesh_max_error","toString","QuantizedMeshTerrainLayer","minZoom","maxZoom","onViewportLoad","zRange","TileLayer","id","getTileData","renderSubLayers","refinementStrategy","a","terrainUrl","load","QuantizedMeshLoader","props","data","tile","SimpleMeshLayer","mesh","getPolygonOffset","coordinateSystem","COORDINATE_SYSTEM","CARTESIAN","modelMatrix","getModelMatrix","getPosition","d","getColor","worldScale","Math","pow","xScale","yScale","xOffset","yOffset","Matrix4","translate","scale","InfoBox","Container","style","position","width","maxWidth","left","top","padding","maxHeight","zIndex","backgroundColor","pointerEvents","overflowY","overflow","Header","as","target","rel","href","Icon","name","INITIAL_VIEW_STATE","latitude","longitude","bearing","pitch","zoom","maxPitch","App","state","viewState","length","every","ranges","map","arr","header","boundingBox","bound","minZ","min","maxZ","max","setState","this","layers","initialViewState","onViewStateChange","controller","React","Component","document","body","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e8ea2d94.chunk.js","sourcesContent":["import { TileLayer } from \"@deck.gl/geo-layers\";\nimport { SimpleMeshLayer } from \"@deck.gl/mesh-layers\";\nimport { COORDINATE_SYSTEM } from \"@deck.gl/core\";\nimport { load } from \"@loaders.gl/core\";\nimport { QuantizedMeshLoader } from \"@loaders.gl/terrain\";\nimport { Matrix4 } from \"math.gl\";\n\nconst DUMMY_DATA = [1];\n\n// Error suggestion from here\n// https://www.linkedin.com/pulse/fast-cesium-terrain-rendering-new-quantized-mesh-output-alvaro-huarte/\nfunction getMeshMaxError(z) {\n  return (77067.34 / (1 << z)).toFixed(2);\n}\n\nfunction quantizedMeshUrl(opts) {\n  const { x, y, z, mosaicUrl = \"terrarium\", meshMaxError = 10 } = opts;\n  const params = {\n    url: mosaicUrl,\n    mesh_max_error: meshMaxError,\n  };\n  const searchParams = new URLSearchParams(params);\n  let baseUrl = `https://us-east-1-lambda.kylebarron.dev/dem/mesh/${z}/${x}/${y}.terrain?`;\n  return baseUrl + searchParams.toString();\n}\n\nexport function QuantizedMeshTerrainLayer(opts) {\n  const { minZoom = 0, maxZoom = 15, onViewportLoad, zRange } = opts || {};\n  return new TileLayer({\n    id: \"quantized-mesh-tile\",\n    minZoom,\n    maxZoom,\n    getTileData,\n    renderSubLayers,\n    onViewportLoad,\n    zRange,\n    refinementStrategy: \"no-overlap\",\n  });\n}\n\nasync function getTileData({ x, y, z }) {\n  const meshMaxError = getMeshMaxError(z);\n  const terrainUrl = quantizedMeshUrl({ x, y, z, meshMaxError });\n  return load(terrainUrl, QuantizedMeshLoader);\n}\n\nfunction renderSubLayers(props) {\n  const { data, tile } = props;\n\n  return [\n    new SimpleMeshLayer(props, {\n      // NOTE: currently you need to set each sublayer id so they don't conflict\n      id: `terrain-simple-mesh-layer-${tile.x}-${tile.y}-${tile.z}`,\n      data: DUMMY_DATA,\n      mesh: data,\n      getPolygonOffset: null,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      modelMatrix: getModelMatrix(tile),\n      getPosition: (d) => [0, 0, 0],\n      // Color to use if surfaceImage is unavailable\n      getColor: [200, 200, 200],\n      // wireframe: true,\n    }),\n  ];\n}\n\n// From https://github.com/uber/deck.gl/blob/b1901b11cbdcb82b317e1579ff236d1ca1d03ea7/modules/geo-layers/src/mvt-tile-layer/mvt-tile-layer.js#L41-L52\n// Necessary when using COORDINATE_SYSTEM.CARTESIAN with the standard web\n// mercator viewport\nfunction getModelMatrix(tile) {\n  const WORLD_SIZE = 512;\n  const worldScale = Math.pow(2, tile.z);\n\n  const xScale = WORLD_SIZE / worldScale;\n  const yScale = -xScale;\n\n  const xOffset = (WORLD_SIZE * tile.x) / worldScale;\n  const yOffset = WORLD_SIZE * (1 - tile.y / worldScale);\n\n  return new Matrix4()\n    .translate([xOffset, yOffset, 0])\n    .scale([xScale, yScale, 1]);\n}\n","import React from \"react\";\nimport { Header, Container, Icon } from \"semantic-ui-react\";\n\nexport default function InfoBox(props) {\n  return (\n    <Container\n      style={{\n        position: \"absolute\",\n        width: 300,\n        maxWidth: '50%',\n        left: 5,\n        top: 5,\n        padding: 5,\n        maxHeight: \"50%\",\n        zIndex: 1,\n        backgroundColor: \"#fff\",\n        pointerEvents: \"auto\",\n        overflowY: \"auto\",\n        overflow: \"visible\",\n      }}\n    >\n      <Header as=\"h4\">Serverless Quantized Mesh</Header>\n      <p>\n        Uses{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/kylebarron/pymartini\"\n        >\n          <Icon name=\"github\" />\n          <code>pymartini</code>\n        </a>{\" \"}\n        for mesh generation,{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/kylebarron/quantized-mesh-encoder\"\n        >\n          <Icon name=\"github\" />\n          <code>quantized-mesh-encoder</code>\n        </a>{\" \"}\n        for encoding to quantized mesh,{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/kylebarron/dem-tiler\"\n        >\n          <Icon name=\"github\" />\n          <code>dem-tiler</code>\n        </a>{\" \"}\n        for the serverless API, and{\" \"}\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://deck.gl\">\n          <code>deck.gl</code>\n        </a>{\" \"}\n        for rendering. You can also easily overlay a texture source, e.g. Mapbox\n        Satellite tiles, with deck.gl.{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/kylebarron/quantized-mesh-encoder/tree/master/site\"\n        >\n          <Icon name=\"github\" />\n          Example source.\n        </a>\n      </p>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport DeckGL from \"@deck.gl/react\";\nimport { QuantizedMeshTerrainLayer } from \"./quantized-mesh-layer\";\nimport InfoBox from \"./info-box\";\nimport \"./App.css\";\n\nconst INITIAL_VIEW_STATE = {\n  latitude: 36.07091852096502,\n  longitude: -112.00934837595949,\n  bearing: -35.19642857142857,\n  pitch: 60,\n  zoom: 13.574472859832357,\n  maxPitch: 89,\n};\n\nclass App extends React.Component {\n  state = {\n    viewState: INITIAL_VIEW_STATE,\n    zRange: null,\n  };\n\n  // Update zRange of viewport\n  onViewportLoad = (data) => {\n    if (!data || data.length === 0 || data.every((x) => !x)) {\n      return;\n    }\n\n    const { zRange } = this.state;\n    const ranges = data.map((arr) => {\n      const bounds = arr.header.boundingBox;\n      return bounds.map((bound) => bound[2]);\n    });\n    const minZ = Math.min(...ranges.map((x) => x[0]));\n    const maxZ = Math.max(...ranges.map((x) => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({ zRange: [minZ, maxZ] });\n    }\n  };\n\n  render() {\n    const { viewState, zRange } = this.state;\n\n    const layers = [\n      QuantizedMeshTerrainLayer({\n        onViewportLoad: this.onViewportLoad,\n        zRange,\n      }),\n    ];\n\n    return (\n      <div>\n        <DeckGL\n          initialViewState={viewState}\n          layers={layers}\n          onViewStateChange={(viewState) => this.setState({ viewState })}\n          controller={true}\n        />\n        <InfoBox />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\ndocument.body.style.margin = 0;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}