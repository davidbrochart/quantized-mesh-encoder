{"version":3,"sources":["quantized-mesh-layer.js","info-box.js","App.js","serviceWorker.js","index.js"],"names":["DUMMY_DATA","MapboxAccessToken","process","getMeshMaxError","z","toFixed","quantizedMeshUrl","opts","x","y","mosaicUrl","meshAlgorithm","meshMaxError","searchParams","URLSearchParams","url","mesh_max_error","mesh_algorithm","flip_y","toString","QuantizedMeshTerrainLayer","minZoom","maxZoom","onViewportLoad","zRange","loadTexture","TileLayer","id","getTileData","args","renderSubLayers","refinementStrategy","updateTriggers","a","terrainUrl","terrain","load","QuantizedMeshLoader","imageUrl","image","ImageLoader","Promise","all","props","data","tile","mesh","texture","SimpleMeshLayer","getPolygonOffset","coordinateSystem","COORDINATE_SYSTEM","CARTESIAN","modelMatrix","getModelMatrix","getPosition","d","getColor","worldScale","Math","pow","xScale","yScale","xOffset","yOffset","Matrix4","translate","scale","MESH_OPTIONS","key","value","text","InfoBox","onChange","panels","title","content","target","rel","href","Icon","name","Checkbox","label","onClick","event","checked","Select","placeholder","options","Container","style","position","width","left","top","padding","maxHeight","zIndex","pointerEvents","overflowY","overflow","Accordion","defaultActiveIndex","styled","maxWidth","INITIAL_VIEW_STATE","latitude","longitude","bearing","pitch","zoom","maxPitch","App","state","viewState","length","every","ranges","filter","Boolean","map","arr","header","boundingBox","bound","minZ","min","maxZ","max","setState","this","layers","backgroundColor","onViewStateChange","controller","touchRotate","newState","React","Component","document","body","margin","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cfc3ff19.chunk.js","sourcesContent":["import { TileLayer } from \"@deck.gl/geo-layers\";\nimport { SimpleMeshLayer } from \"@deck.gl/mesh-layers\";\nimport { COORDINATE_SYSTEM } from \"@deck.gl/core\";\nimport { load } from \"@loaders.gl/core\";\nimport { ImageLoader } from \"@loaders.gl/images\";\nimport { QuantizedMeshLoader } from \"@loaders.gl/terrain\";\nimport { Matrix4 } from \"math.gl\";\n\nconst DUMMY_DATA = [1];\n\n// With create react app, env variables need to be prefixed with REACT_APP\nconst MapboxAccessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n\n// Error suggestion from here\n// https://www.linkedin.com/pulse/fast-cesium-terrain-rendering-new-quantized-mesh-output-alvaro-huarte/\nfunction getMeshMaxError(z) {\n  return (77067.34 / (1 << z)).toFixed(2);\n}\n\nfunction quantizedMeshUrl(opts) {\n  const {\n    x,\n    y,\n    z,\n    mosaicUrl = \"terrarium\",\n    meshAlgorithm = \"pydelatin\",\n    meshMaxError = 10,\n  } = opts;\n  const params = {\n    url: mosaicUrl,\n    mesh_max_error: meshMaxError,\n    mesh_algorithm: meshAlgorithm,\n    // True for pydelatin, false for pymartini. Not sure why...\n    flip_y: meshAlgorithm === \"pydelatin\",\n  };\n  const searchParams = new URLSearchParams(params);\n  let baseUrl = `https://us-east-1-lambda.kylebarron.dev/dem/mesh/${z}/${x}/${y}.terrain?`;\n  return baseUrl + searchParams.toString();\n}\n\nexport function QuantizedMeshTerrainLayer(opts) {\n  const {\n    minZoom = 0,\n    maxZoom = 15,\n    onViewportLoad,\n    zRange,\n    meshAlgorithm,\n    loadTexture,\n  } = opts || {};\n  return new TileLayer({\n    id: \"quantized-mesh-tile\",\n    minZoom,\n    maxZoom,\n    getTileData: (args) => getTileData({ ...args, meshAlgorithm, loadTexture }),\n    renderSubLayers,\n    onViewportLoad,\n    zRange,\n    refinementStrategy: \"no-overlap\",\n    updateTriggers: {\n      getTileData: [meshAlgorithm, loadTexture],\n    },\n  });\n}\n\nasync function getTileData({ x, y, z, meshAlgorithm, loadTexture }) {\n  const meshMaxError = getMeshMaxError(z);\n  const terrainUrl = quantizedMeshUrl({ x, y, z, meshMaxError, meshAlgorithm });\n  const terrain = load(terrainUrl, QuantizedMeshLoader);\n\n  const imageUrl = `https://api.mapbox.com/v4/mapbox.satellite/${z}/${x}/${y}.png?access_token=${MapboxAccessToken}`;\n  let image;\n  if (loadTexture) {\n    image = load(imageUrl, ImageLoader);\n  }\n  return Promise.all([terrain, image]);\n}\n\nfunction renderSubLayers(props) {\n  const { data, tile } = props;\n\n  const [mesh, texture] = data || [];\n\n  return [\n    new SimpleMeshLayer(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      getPolygonOffset: null,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      modelMatrix: getModelMatrix(tile),\n      getPosition: (d) => [0, 0, 0],\n      // Color to use if surfaceImage is unavailable\n      getColor: [200, 200, 200],\n      // wireframe: true,\n    }),\n  ];\n}\n\n// From https://github.com/uber/deck.gl/blob/b1901b11cbdcb82b317e1579ff236d1ca1d03ea7/modules/geo-layers/src/mvt-tile-layer/mvt-tile-layer.js#L41-L52\n// Necessary when using COORDINATE_SYSTEM.CARTESIAN with the standard web\n// mercator viewport\nfunction getModelMatrix(tile) {\n  const WORLD_SIZE = 512;\n  const worldScale = Math.pow(2, tile.z);\n\n  const xScale = WORLD_SIZE / worldScale;\n  const yScale = -xScale;\n\n  const xOffset = (WORLD_SIZE * tile.x) / worldScale;\n  const yOffset = WORLD_SIZE * (1 - tile.y / worldScale);\n\n  return new Matrix4()\n    .translate([xOffset, yOffset, 0])\n    .scale([xScale, yScale, 1]);\n}\n","import React from \"react\";\nimport {\n  Accordion,\n  Container,\n  Checkbox,\n  Icon,\n  Select,\n} from \"semantic-ui-react\";\n\nconst MESH_OPTIONS = [\n  { key: \"pydelatin\", value: \"pydelatin\", text: \"Algorithm: Delatin\" },\n  { key: \"pymartini\", value: \"pymartini\", text: \"Algorithm: Martini\" },\n];\n\nexport default function InfoBox(props) {\n  const { meshAlgorithm, loadTexture, onChange } = props;\n\n  const panels = [\n    {\n      key: \"main-panel\",\n      title: \"Serverless 3D Terrain Mesh\",\n      content: {\n        content: (\n          <div>\n            <p>\n              Uses{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://github.com/kylebarron/pydelatin\"\n              >\n                <Icon name=\"github\" />\n                <code>pydelatin</code>\n              </a>{\" \"}\n              or{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://github.com/kylebarron/pymartini\"\n              >\n                <Icon name=\"github\" />\n                <code>pymartini</code>\n              </a>{\" \"}\n              for mesh generation,{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://github.com/kylebarron/quantized-mesh-encoder\"\n              >\n                <Icon name=\"github\" />\n                <code>quantized-mesh-encoder</code>\n              </a>{\" \"}\n              for encoding to{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://github.com/CesiumGS/quantized-mesh\"\n              >\n                quantized mesh\n              </a>\n              ,{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://github.com/kylebarron/dem-tiler\"\n              >\n                <Icon name=\"github\" />\n                <code>dem-tiler</code>\n              </a>{\" \"}\n              for the serverless API, and{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://deck.gl\"\n              >\n                <code>deck.gl</code>\n              </a>{\" \"}\n              for rendering. You can also easily overlay a texture source, e.g.\n              Mapbox Satellite tiles, with deck.gl.{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://github.com/kylebarron/quantized-mesh-encoder/tree/master/site\"\n              >\n                <Icon name=\"github\" />\n                Example source.\n              </a>\n            </p>\n\n            <p>\n              If you look closely, you should be able to see small differences\n              between the Delatin and Martini meshes. Namely all of Martini's\n              triangles are <i>right</i> triangles, while Delatin doesn't have\n              that restriction, allowing it to have a more efficient mesh (fewer\n              triangles) for a given maximum error.\n            </p>\n\n            <Checkbox\n              label=\"Overlay satellite imagery\"\n              value={loadTexture}\n              onClick={(event, { checked }) =>\n                onChange({ loadTexture: checked })\n              }\n            />\n            <br />\n            <Select\n              placeholder=\"Select mesh algorithm\"\n              options={MESH_OPTIONS}\n              value={meshAlgorithm}\n              onChange={(event, { value }) =>\n                onChange({ meshAlgorithm: value })\n              }\n            />\n          </div>\n        ),\n      },\n    },\n  ];\n\n  return (\n    <Container\n      style={{\n        position: \"absolute\",\n        width: 400,\n        left: 5,\n        top: 5,\n        padding: 5,\n        maxHeight: \"50%\",\n        zIndex: 1,\n        pointerEvents: \"auto\",\n        overflowY: \"auto\",\n        overflow: \"visible\",\n      }}\n    >\n      <Accordion\n        defaultActiveIndex={0}\n        styled\n        panels={panels}\n        style={{\n          maxWidth: \"90%\",\n        }}\n      />\n    </Container>\n  );\n}\n","import React from \"react\";\nimport DeckGL from \"@deck.gl/react\";\nimport { QuantizedMeshTerrainLayer } from \"./quantized-mesh-layer\";\nimport InfoBox from \"./info-box\";\nimport \"./App.css\";\n\nconst INITIAL_VIEW_STATE = {\n  latitude: 36.07091852096502,\n  longitude: -112.00934837595949,\n  bearing: -35.19642857142857,\n  pitch: 60,\n  zoom: 13.574472859832357,\n  maxPitch: 89,\n};\n\nclass App extends React.Component {\n  state = {\n    viewState: INITIAL_VIEW_STATE,\n    zRange: null,\n    meshAlgorithm: \"pydelatin\",\n    loadTexture: false,\n  };\n\n  // Update zRange of viewport\n  onViewportLoad = (data) => {\n    if (!data || data.length === 0 || data.every((x) => !x)) {\n      return;\n    }\n\n    const { zRange } = this.state;\n    const ranges = data.filter(Boolean).map((arr) => {\n      const bounds = arr[0].header.boundingBox;\n      return bounds.map((bound) => bound[2]);\n    });\n    const minZ = Math.min(...ranges.map((x) => x[0]));\n    const maxZ = Math.max(...ranges.map((x) => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({ zRange: [minZ, maxZ] });\n    }\n  };\n\n  render() {\n    const { viewState, zRange, meshAlgorithm, loadTexture } = this.state;\n\n    const layers = [\n      QuantizedMeshTerrainLayer({\n        onViewportLoad: this.onViewportLoad,\n        zRange,\n        meshAlgorithm,\n        loadTexture,\n      }),\n    ];\n\n    return (\n      <div>\n        <DeckGL\n          // Try to hide tile lod cracks\n          style={{\n            backgroundColor: \"rgb(0, 0, 0)\",\n          }}\n          viewState={viewState}\n          layers={layers}\n          onViewStateChange={({ viewState }) => this.setState({ viewState })}\n          controller={{ touchRotate: true }}\n        >\n          <InfoBox\n            meshAlgorithm={meshAlgorithm}\n            loadTexture={loadTexture}\n            onChange={(newState) => this.setState(newState)}\n          />\n        </DeckGL>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\ndocument.body.style.margin = 0;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}